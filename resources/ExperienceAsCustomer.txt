Our experience as the customer:

The code from our provider had a very neat GUI. Their GUI allows users to choose one of 6 options to modify an animation and based on the user’s options they can enable/disable different input text fields. It is much simpler than our design where we have many more textboxes and a button for each option to modify animation. We can use their design for a much more intuitive GUI. Our customer group petition to have OOD pass/fail so we didn’t get feedback from them about our design.

We had a moderate relationship with our provider. They replied and gave us the starter code in a prompt manner. However, when they gave us the code there were a lot of design problems and they didn’t mention them until we pointed them out. For instance, the biggest problem is their project can’t run input files and can only work with their JUnit test. The providers didn’t have the ability to fix this issue so we investigated ourselves. My partner and I analyzed their code and pinpointed the problem to their Animator Panel. To make our project work, we made a small change so Animator Panel will accept a Model instead of a Shape, and fixed the way how paintComponent() works. We recognize that this change should be done by the providers but due to the situation it was very hard to do so.


A detail of all the change made my us the customer simulates what we want the provider to change for us:

1. Provider's animation panel does not work with drawing animation given by an input file. There were several error associated with their tweening and also getting List of Transformation from the model. Firstly with tweening, they don't have any error throwing mechanism when they recieve a motion (transformation) that has the same start time and end time. Secondly, the provider's panel only ever recieve the first motion in a List of motion because there are no mechanism in their view or model to change the order of a List of motions Thirdly, their panel does not have access to the model but only to Shape objects, which means we have no way of informing the panel using our model. To solve these problems, we had to switch out their panel with our Animator panel to work. Specifically, we made their animator accept a model given by the view and the panel will call getShape() method (from our model) to draw the animation.

2. We made some minor edits in the provider EditorView class as well. The providers thought to speed up the timers means skipping ticks in their animation, because they were not editing the "delay" parameter in the swing timer. We adjust this so that their "speed" parameter will help change the "delay" parameter, by doing .setDelay(1000/speed) when updating the animation speed.

3. Refractor the provider view's names, adding "P" infront of the classes that had the same name.